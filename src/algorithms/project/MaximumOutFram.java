package algorithms.project;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import static algorithms.project.ChooseFram.maximumflowNum;
import static algorithms.project.EdgeInputFram.frame;
import static algorithms.project.EdgeInputFram.vs;
import edu.uci.ics.jung.algorithms.layout.CircleLayout;
import edu.uci.ics.jung.graph.DirectedSparseGraph;
//import com.sun.xml.internal.ws.api.streaming.XMLStreamReaderFactory;
import edu.uci.ics.jung.graph.SparseGraph;
import edu.uci.ics.jung.visualization.VisualizationImageServer;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Paint;
import java.awt.Stroke;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.collections15.Transformer;

/**
 *
 * @author Home
 */
public class MaximumOutFram extends javax.swing.JFrame {

    /**
     * Creates new form OutPutFram
     */
    DefaultTableModel model;
    public MaximumOutFram() {
        initComponents();
        setLocationRelativeTo(null);
        visitedArr = new Vector();
        visitedArrBlue = new Vector();
        visitedArrGray = new Vector();
        edgeNamesArr = new Vector();
        vistedBool = false;
        count = 0 ;

        model = new DefaultTableModel();
        tableData.setModel(model);
        model.addColumn("Path");
        
        model.addColumn("Maximum Flow");
        
        
//        for (int i = 0; i <ShortestPath.vertexNames.size() ; i++) {
//            model.addRow(new Object[]{
//                ShortestPath.vertexNames.get(0),
//                ShortestPath.distance[0]
//        
//            });
//        }
        


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableData = new javax.swing.JTable();
        maxAddressLb = new javax.swing.JLabel();
        closeBt = new javax.swing.JButton();
        backBt = new javax.swing.JButton();
        stepBystepBt = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        resultBt = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/algorithms/project/source/abstract-geometric-shape-connection-with-3d-cubes-background_42705-105.jpg"))); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(450, 0));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableData.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Vertex Name", "Shortest Path From Source"
            }
        ));
        jScrollPane1.setViewportView(tableData);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(91, 161, 413, 124));

        maxAddressLb.setFont(new java.awt.Font("Lucida Calligraphy", 1, 18)); // NOI18N
        maxAddressLb.setText("Maximum Flow");
        getContentPane().add(maxAddressLb, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, -1, -1));

        closeBt.setFont(new java.awt.Font("Lucida Calligraphy", 1, 15)); // NOI18N
        closeBt.setForeground(new java.awt.Color(200, 0, 0));
        closeBt.setText("Exit");
        closeBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtActionPerformed(evt);
            }
        });
        getContentPane().add(closeBt, new org.netbeans.lib.awtextra.AbsoluteConstraints(391, 319, 113, -1));

        backBt.setFont(new java.awt.Font("Lucida Calligraphy", 1, 15)); // NOI18N
        backBt.setText("Previous");
        backBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtActionPerformed(evt);
            }
        });
        getContentPane().add(backBt, new org.netbeans.lib.awtextra.AbsoluteConstraints(91, 319, 113, -1));

        stepBystepBt.setFont(new java.awt.Font("Lucida Calligraphy", 1, 15)); // NOI18N
        stepBystepBt.setForeground(new java.awt.Color(0, 0, 255));
        stepBystepBt.setText("Next Step");
        stepBystepBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepBystepBtActionPerformed(evt);
            }
        });
        getContentPane().add(stepBystepBt, new org.netbeans.lib.awtextra.AbsoluteConstraints(468, 105, -1, -1));

        jLabel2.setFont(new java.awt.Font("Lucida Calligraphy", 1, 15)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 153));
        jLabel2.setText("To See Result step by step press Next Step");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 105, -1, 29));

        jLabel3.setFont(new java.awt.Font("Lucida Calligraphy", 1, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 153));
        jLabel3.setText("To See The Whole Result press Result");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 65, -1, 29));

        resultBt.setFont(new java.awt.Font("Lucida Calligraphy", 1, 15)); // NOI18N
        resultBt.setForeground(new java.awt.Color(0, 0, 255));
        resultBt.setText("Result");
        resultBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultBtActionPerformed(evt);
            }
        });
        getContentPane().add(resultBt, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 60, 113, -1));

        jButton2.setFont(new java.awt.Font("Lucida Calligraphy", 1, 14)); // NOI18N
        jButton2.setText("New Input");
        jButton2.setActionCommand("New Input");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 320, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/algorithms/project/source/abstract-geometric-shape-connection-with-3d-cubes-background_42705-105.jpg"))); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 370));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtActionPerformed
        // TODO add your handling code here:
        System.exit(0);        
    }//GEN-LAST:event_closeBtActionPerformed

    private void backBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtActionPerformed
        // TODO add your handling code here:
        super.setVisible(false);
        ChooseFram chosF = new ChooseFram();
        chosF.setVisible(true);
        EdgeInputFram.frame.setVisible(false);
        EdgeInputFram.displayGraph();
    }//GEN-LAST:event_backBtActionPerformed

    private void stepBystepBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepBystepBtActionPerformed
        // TODO add your handling code here:
        
        if(counter == 0){
            clearTable();
            //counter = -1;
            
        }
        if(flag){
            clearTable();
            flag = false;
            counter = 0;
            
        }
        clearVectors();
        vistedBool = false;
        if(counter < ChooseFram.maximumFlow.paths.size()){
            
            displayStepByStep();
            model.addRow(new Object[]{
                ChooseFram.maximumFlow.routs.get(counter),
                ChooseFram.maximumFlow.minimum.get(counter)
        
            });
            
            counter++;

//            count++;
            
        }
        else{
                counter = 0;
                model.addRow(new Object[]{
                    "Maximum Flow",
                    ChooseFram.maximumflowNum

                });
            
            stepBystepBt.setText("Finished");
            stepBystepBt.setForeground(new Color(0,100,0));
            stepBystepBt.setEnabled(false);
        }

    }//GEN-LAST:event_stepBystepBtActionPerformed
    public void clearTable(){
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged(); // notifies the JTable that the model has changed
        
        
        count = 0 ;
        vistedBool = false;
        
        stepBystepBt.setText("Next Step");
        stepBystepBt.setForeground(Color.BLUE);
        stepBystepBt.setEnabled(true);
    }
    public void clearVectors(){
        visitedArr  = new Vector<>();
        visitedArrBlue  = new Vector<>();
        visitedArrGray  = new Vector<>();
    }
    private void resultBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultBtActionPerformed
        // TODO add your handling code here:
        clearTable();
        clearVectors();
        counter = 1 ;
        flag = true;
        //ChooseFram.displayDijkatra();
        //maxAddressLb.setText("Maximum Flow = " + ChooseFram.maximumflowNum);
        displayMaximumFlow();
        for (int i = 0; i < ChooseFram.maximumFlow.routs.size(); i++) {
            model.addRow(new Object[]{
                ChooseFram.maximumFlow.routs.get(i),
                ChooseFram.maximumFlow.minimum.get(i)
        
            });
        }
        model.addRow(new Object[]{
            "Maximum Flow",
            ChooseFram.maximumflowNum

        });

        //counter = 0 ;
    }//GEN-LAST:event_resultBtActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        StartFrame stf = new StartFrame();
        stf.setVisible(true);
        EdgeInputFram.frame.dispose();
        frame.dispose();
        super.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed
    public void displayMaximumFlow(){
        Vector<Edge>edges2 = MaximumFlow.graph.getEdges();
        System.out.println(edges2.size());
        for (int i = 0; i < edges2.size(); i++) {
            String weight = String.valueOf(edges2.get(i).weight);
            System.out.println(edges2.get(i).weight+ ","+edges2.get(i).initial+"," +edges2.get(i).terminate);
             while(edgeNamesArr.contains(weight)){weight+="*" ;}
                edgeNamesArr.add(weight);       
                if(VertexNameInputFram.g.directed == true)
                    directedGraph.addEdge(weight,edges2.get(i).initial, edges2.get(i).terminate);
                else
                    unDirectedGraph.addEdge(weight,edges2.get(i).initial, edges2.get(i).terminate);
                    
        }
        
        if(VertexNameInputFram.g.directed == true){
            vs =
                   new VisualizationImageServer<String, String>(new CircleLayout<String, String>(directedGraph), 
                           new Dimension(200, 200));
        }
        else{
            vs =
                   new VisualizationImageServer<String, String>(new CircleLayout<String, String>(unDirectedGraph), 
                           new Dimension(200, 200));
        }
           
           
            
            Transformer<String, String> transformer2 = new Transformer<String, String>() {

                @Override
                public String transform(String arg0) {
                    return arg0;
                }

            };



            Transformer<String, String> transformer1 = new Transformer<String, String>() {

                @Override
                public String transform(String arg0){
                    return arg0;
                }
            };

         // vv is the VirtualizationViewer
            vs.getRenderContext().setLabelOffset(20);
            vs.getRenderContext().setEdgeLabelTransformer(transformer1);
            vs.getRenderContext().setVertexLabelTransformer(transformer2);



        //frame = new JFrame();
        frame.getContentPane().add(vs);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        frame.setSize(500,400);
        frame.setTitle("Maximum Flow");

    
    } 
    
    public void displayStepByStep(){
        Transformer<String, Paint> edgePaint = new Transformer<String, Paint>() {    
            @Override
            public Paint transform(String s) {    // s represents the edge
                    //String weight = s.replace("*", "");
                    //System.out.println(weight);
                    //System.out.println("Map = "+EdgeInputFram.map.get(s));
                    //System.out.println(ShortestPath.map.containsValue(EdgeInputFram.map.get(s)));
                    
                    System.out.println("S = "+s);

                    if(!visitedArr.contains(s) && !vistedBool){
                        System.out.println("IN Bigger IF");
                        visitedArr.add(s);
                        //String str = ChooseFram.maximumFlow.paths.get(0).edges.get(0).initial;
                        if (ChooseFram.maximumFlow.paths.get(counter-1).map.containsKey(EdgeInputFram.map.get(s))||
                               ChooseFram.maximumFlow.paths.get(counter-1).map.containsKey(EdgeInputFram.map2.get(s)) ){
                            visitedArrBlue.add(s);
                            System.out.println("In Blue");
                            //vistedBool = true;
                            //count++;
                            return Color.BLUE;
                        }
                        else {
                            //count++;
                            visitedArrGray.add(s);
                            System.out.println("In Gray");
                            return Color.LIGHT_GRAY;
                        }
                    }
                    else if (visitedArrBlue.contains(s))
                        return Color.BLUE;
                    else if (visitedArrGray.contains(s))
                        return Color.LIGHT_GRAY;
                    else
                        return Color.LIGHT_GRAY;

                }
            };
            //vistedBool = false;
                ///Change Edge Font 
            EdgeInputFram.vs.getRenderContext().setLabelOffset(20);
            EdgeInputFram.vs.getRenderContext().setEdgeStrokeTransformer(new Transformer<String,Stroke>(){
               @Override
               public Stroke transform(String s) {
                   return new BasicStroke(5);
               }
           });
           EdgeInputFram.vs.getRenderContext().setEdgeArrowStrokeTransformer(new Transformer<String,Stroke>(){
               @Override
               public Stroke transform(String s) {
                   return new BasicStroke(5);
               }
           });


            EdgeInputFram.vs.getRenderContext().setEdgeDrawPaintTransformer(edgePaint);
            //EdgeInputFram.vs.getRenderContext().setEdgeFontTransformer();

            EdgeInputFram.frame.getContentPane().add(EdgeInputFram.vs);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.pack();
            frame.setVisible(true);
            frame.setSize(500,400);
            frame.setTitle("Maximum Flow Steps");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MaximumOutFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MaximumOutFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MaximumOutFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MaximumOutFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MaximumOutFram().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBt;
    private javax.swing.JButton closeBt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel maxAddressLb;
    private javax.swing.JButton resultBt;
    private javax.swing.JButton stepBystepBt;
    private javax.swing.JTable tableData;
    // End of variables declaration//GEN-END:variables
    public static Vector<String> visitedArr ;
    public static Vector<String> visitedArrBlue ;
    public static Vector<String> visitedArrGray ;
    public  Vector<String> edgeNamesArr;
    public int count ;
    public static Boolean vistedBool;
    public  DirectedSparseGraph<String, String> directedGraph = new DirectedSparseGraph<String, String>();
    public static SparseGraph<String, String> unDirectedGraph = new SparseGraph<String, String>();
    public static int counter = 0;
    public Boolean flag = false;  
    public  VisualizationImageServer<String, String> vs;

    

}
